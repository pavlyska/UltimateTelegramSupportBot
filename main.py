from config import *
from base import *

bot = telebot.TeleBot(BOT_TOKEN)

#######
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
#######
user_main_menu = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
user_main_menu.row("üìù –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç")
user_main_menu.row("üìú –ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–µ—Ç–æ–≤")

user_blocked_menu = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
user_blocked_menu.row("‚öñÔ∏è –ü–æ–¥–∞—Ç—å –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ")
user_blocked_menu.row("‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")

admin_menu = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
admin_menu.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞", "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞")
admin_menu.row("üìã –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤")
admin_menu.row("üë• –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞")
admin_menu.row("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
admin_menu.row("‚öñÔ∏è –û–±–∂–∞–ª–æ–≤–∞–Ω–∏—è")

agent_menu = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
agent_menu.row("üìã –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤")
agent_menu.row("üë• –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞")
agent_menu.row("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
agent_menu.row("‚öñÔ∏è –û–±–∂–∞–ª–æ–≤–∞–Ω–∏—è")


#######
# –ö–Ω–æ–ø–∫–∞ "‚öñÔ∏è –û–±–∂–∞–ª–æ–≤–∞–Ω–∏—è"
#######
@bot.message_handler(func=lambda message: message.text == "‚öñÔ∏è –û–±–∂–∞–ª–æ–≤–∞–Ω–∏—è")
def show_appeals_list(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚öñÔ∏è –û–±–∂–∞–ª–æ–≤–∞–Ω–∏—è"
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ–¥–æ–±—Ä–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ (–∞–≥–µ–Ω—Ç–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    """
    staff_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    cursor.execute("SELECT role FROM staff WHERE user_id = ?", (staff_id,))
    staff = cursor.fetchone()
    if not staff:
        bot.send_message(staff_id, 
                         "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–π.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–π —Å username –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
        cursor.execute("""
            SELECT a.appeal_id, a.user_id, a.reason, a.status, a.related_ticket_id, a.created_at, u.username
            FROM appeals a
            LEFT JOIN users u ON a.user_id = u.user_id
            ORDER BY a.created_at DESC
        """)
        appeals = cursor.fetchall()
        
        if not appeals:
            bot.send_message(
                staff_id,
                "üìã –°–ø–∏—Å–æ–∫ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–π –ø—É—Å—Ç.",
                reply_markup=admin_menu if staff[0] == "admin" else agent_menu
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è
        for appeal in appeals:
            appeal_id, user_id, reason, status, ticket_id, created_at, username = appeal
            username = f"@{username}" if username else "–ù–µ—Ç —Ç–µ–≥–∞"
            
            response = (
                f"üìå –û–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ #{appeal_id}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} ({user_id})\n"
                f"üîó –¢–∏–∫–µ—Ç: #{ticket_id}\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                f"üïí –°–æ–∑–¥–∞–Ω–æ: {created_at}\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending
            if status == "pending":
                keyboard = InlineKeyboardMarkup()
                keyboard.row(
                    InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_appeal_{appeal_id}_{user_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"reject_appeal_{appeal_id}_{user_id}")
                )
                bot.send_message(staff_id, response, reply_markup=keyboard)
            else:
                bot.send_message(staff_id, response)
    
    except sqlite3.Error as e:
        bot.send_message(staff_id, 
                         "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Database error in show_appeals_list: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith("reject_appeal_"))
def reject_appeal(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–∞–∑–∞ –≤ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–∏
    """
    data = call.data.split("_")
    appeal_id = int(data[2])
    user_id = int(data[3])

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""
            SELECT role FROM staff 
            WHERE user_id = ? AND (role = 'admin' OR role = 'agent')
        """, (call.from_user.id,))
        staff = cursor.fetchone()
        if not staff:
            bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º.", show_alert=True)
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞
        bot.send_message(
            call.message.chat.id,
            "üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –≤ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–∏:"
        )
        bot.register_next_step_handler(call.message, lambda m: process_reject_appeal(m, appeal_id, user_id, call))
    
    except Exception as e:
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", show_alert=True)
        print(f"Error in reject_appeal handler: {e}")

def process_reject_appeal(message, appeal_id, user_id, call):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞ –≤ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–∏
    """
    try:
        reason = message.text.strip()
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        conn.execute("BEGIN")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è
        cursor.execute("""
            UPDATE appeals 
            SET status = ?, updated_at = CURRENT_TIMESTAMP 
            WHERE appeal_id = ?
        """, (f"rejected: {reason}", appeal_id))
        
        # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –æ—Ç–∫–∞–∑–µ
        try:
            bot.send_message(
                user_id,
                f"‚ùå –í–∞—à–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞: {reason}",
                reply_markup=user_blocked_menu
            )
        except telebot.apihelper.ApiTelegramException as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"{call.message.text}\n‚ùå –û–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞: {reason}",
            reply_markup=None
        )
        bot.answer_callback_query(call.id, "‚úÖ –û–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
    
    except sqlite3.Error as e:
        conn.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        error_message = f"Database error during appeal rejection: {e}"
        print(error_message)
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
    
    except Exception as e:
        conn.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö
        error_message = f"Unexpected error during appeal rejection: {e}"
        print(error_message)
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.", show_alert=True)
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.")


@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_appeal_"))
def approve_appeal(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è
    """
    data = call.data.split("_")
    appeal_id = int(data[2])
    user_id = int(data[3])

    try:
        # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        conn.execute("BEGIN")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""
            SELECT role FROM staff 
            WHERE user_id = ? AND (role = 'admin' OR role = 'agent')
        """, (call.from_user.id,))
        staff = cursor.fetchone()
        if not staff:
            bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º.", show_alert=True)
            conn.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è
        cursor.execute("""
            UPDATE appeals 
            SET status = 'approved', updated_at = CURRENT_TIMESTAMP 
            WHERE appeal_id = ?
        """, (appeal_id,))
        
        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""
            UPDATE users 
            SET is_blocked = 0, block_reason = NULL, last_appeal_date = NULL 
            WHERE user_id = ?
        """, (user_id,))
        
        # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
        try:
            bot.send_message(
                user_id,
                "‚úÖ –í–∞—à–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ! –í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.",
                reply_markup=user_main_menu
            )
        except telebot.apihelper.ApiTelegramException as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"{call.message.text}\n‚úÖ –û–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=None
        )
        bot.answer_callback_query(call.id, "‚úÖ –û–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–æ.")
    
    except sqlite3.Error as e:
        conn.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        error_message = f"Database error during appeal approval: {e}"
        print(error_message)
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è.", show_alert=True)
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
    
    except Exception as e:
        conn.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö
        error_message = f"Unexpected error during appeal approval: {e}"
        print(error_message)
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.", show_alert=True)
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.")




@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
def show_block_reason(message):
    user_id = message.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""
            SELECT block_reason, last_appeal_date, is_blocked 
            FROM users 
            WHERE user_id = ?
        """, (user_id,))
        user_data = cursor.fetchone()
        
        if not user_data or not user_data[2]:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
            bot.send_message(
                user_id,
                "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.",
                reply_markup=user_main_menu
            )
            return
        
        block_reason, last_appeal_date, _ = user_data
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = "‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ:\n"
        response += f"‚ùå –ü—Ä–∏—á–∏–Ω–∞: {block_reason}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        if last_appeal_date:
            response += f"‚è≥ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ: {last_appeal_date}\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∞—á–∏ –Ω–æ–≤–æ–≥–æ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è
        if last_appeal_date:
            last_appeal_date_obj = datetime.strptime(last_appeal_date, "%Y-%m-%d")
            if datetime.now() - last_appeal_date_obj < timedelta(days=3):
                response += (
                    "‚è≥ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 3 –¥–Ω—è –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ.\n"
                )
            else:
                response += (
                    "‚öñÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n"
                )
        else:
            response += (
                "‚öñÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n"
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        bot.send_message(user_id, response, reply_markup=user_blocked_menu)
    
    except sqlite3.Error as e:
        bot.send_message(user_id, 
                         "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Database error in show_block_reason: {e}")


#######
# –ö–Ω–æ–ø–∫–∞ "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞"
#######
@bot.message_handler(func=lambda message: message.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞")
def remove_agent(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞"
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —É–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ –∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
    –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É)
    cursor.execute("SELECT role FROM staff WHERE user_id = ?", (user_id,))
    staff = cursor.fetchone()
    if not staff or staff[0] != "admin":
        bot.send_message(user_id, 
                         "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    bot.send_message(user_id, 
                     "üÜî –í–≤–µ–¥–∏—Ç–µ ID –∞–≥–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    bot.register_next_step_handler(message, process_remove_agent)

def process_remove_agent(message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
    """
    admin_id = message.from_user.id
    agent_id_input = message.text.strip()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ ID
        agent_id = int(agent_id_input)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–≥–µ–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT role FROM staff WHERE user_id = ?", (agent_id,))
        agent = cursor.fetchone()
        
        if not agent:
            bot.send_message(admin_id, 
                             f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {agent_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–≥–µ–Ω—Ç–æ–º –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            return
        
        # –ó–∞–ø—Ä–µ—â–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if agent[0] == "admin":
            bot.send_message(admin_id, 
                             "‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –£–¥–∞–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã staff
        cursor.execute("DELETE FROM staff WHERE user_id = ?", (agent_id,))
        conn.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
        bot.send_message(admin_id, 
                         f"‚úÖ –ê–≥–µ–Ω—Ç —Å ID {agent_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        try:
            bot.send_message(
                agent_id,
                "‚ö†Ô∏è –í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —á–∏—Å–ª–∞ –∞–≥–µ–Ω—Ç–æ–≤ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
                reply_markup=user_main_menu  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            )
        except telebot.apihelper.ApiTelegramException as e:
            bot.send_message(
                admin_id,
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {agent_id}: {e}"
            )
        
    except ValueError:
        bot.send_message(admin_id, 
                         "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
    except sqlite3.Error as e:
        bot.send_message(admin_id, 
                         "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Database error in remove_agent: {e}")


#######
# –ö–Ω–æ–ø–∫–∞ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
#######
@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def show_statistics(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã:
    - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤
    - –û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã
    - –ó–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã
    - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    - –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ (–∞–≥–µ–Ω—Ç–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    cursor.execute("SELECT role FROM staff WHERE user_id = ?", (user_id,))
    staff = cursor.fetchone()
    if not staff:
        bot.send_message(user_id, 
                         "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.", 
                         reply_markup=user_main_menu)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–∫–µ—Ç–∞–º
        cursor.execute("SELECT COUNT(*) FROM tickets")
        total_tickets = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM tickets WHERE status = 'open'")
        open_tickets = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM tickets WHERE status = 'closed'")
        closed_tickets = cursor.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        cursor.execute("SELECT COUNT(*) FROM users WHERE is_blocked = 1")
        blocked_users = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—É
        cursor.execute("SELECT COUNT(*) FROM staff WHERE role = 'admin'")
        total_admins = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM staff WHERE role = 'agent'")
        total_agents = cursor.fetchone()[0]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n"
        response += f"üìã –í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: {total_tickets}\n"
        response += f"üü¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: {open_tickets}\n"
        response += f"üî¥ –ó–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: {closed_tickets}\n\n"
        response += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        response += f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {blocked_users}\n\n"
        response += f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {total_admins}\n"
        response += f"üéâ –ê–≥–µ–Ω—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {total_agents}\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        bot.send_message(user_id, 
                         response, 
                         reply_markup=admin_menu if staff[0] == "admin" else agent_menu)
        
    except sqlite3.Error as e:
        bot.send_message(user_id, 
                         "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                         reply_markup=admin_menu if staff[0] == "admin" else agent_menu)
        print(f"Database error in show_statistics: {e}")

#######
# –ö–Ω–æ–ø–∫–∞ "üë• –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞"
#######
@bot.message_handler(func=lambda message: message.text == "üë• –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞")
def show_staff_list(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üë• –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞"
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∞–≥–µ–Ω—Ç–æ–≤ —Å –∏—Ö ID –∏ username
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ (–∞–≥–µ–Ω—Ç–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    cursor.execute("SELECT role FROM staff WHERE user_id = ?", (user_id,))
    staff = cursor.fetchone()
    if not staff:
        bot.send_message(user_id, 
                         "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª–∞.", 
                         reply_markup=user_main_menu)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ —Å –∏—Ö —Ä–æ–ª—è–º–∏ –∏ username –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
        cursor.execute("""
            SELECT s.user_id, s.role, u.username 
            FROM staff s 
            LEFT JOIN users u ON s.user_id = u.user_id
            ORDER BY s.role DESC, s.user_id ASC
        """)
        staff_members = cursor.fetchall()
        
        if not staff_members:
            bot.send_message(user_id, 
                             "üìã –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –ø—É—Å—Ç.", 
                             reply_markup=admin_menu if staff[0] == "admin" else agent_menu)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ –ø–æ —Ä–æ–ª—è–º
        admins = []
        agents = []
        for member in staff_members:
            staff_user_id, role, username = member
            username = f"@{username}" if username else "–ù–µ—Ç —Ç–µ–≥–∞"
            entry = f"  {username} - ID: {staff_user_id}"
            
            if role == "admin":
                admins.append(entry)
            elif role == "agent":
                agents.append(entry)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = "üë• –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞:\n\n"
        
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
        response += "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n"
        if admins:
            response += "\n".join(admins) + "\n"
        else:
            response += "  –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.\n"
        
        # –ê–≥–µ–Ω—Ç—ã
        response += "\nüéâ –ê–≥–µ–Ω—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n"
        if agents:
            response += "\n".join(agents) + "\n"
        else:
            response += "  –ù–µ—Ç –∞–≥–µ–Ω—Ç–æ–≤.\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        bot.send_message(user_id, 
                         response, 
                         reply_markup=admin_menu if staff[0] == "admin" else agent_menu)
        
    except sqlite3.Error as e:
        bot.send_message(user_id, 
                         "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                         reply_markup=admin_menu if staff[0] == "admin" else agent_menu)
        print(f"Database error in show_staff_list: {e}")



#######
# –ö–æ–º–∞–Ω–¥—ã
#######

@bot.message_handler(commands=["ahelp"])
def admin_help(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ahelp
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∞–≥–µ–Ω—Ç–æ–≤
    """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    cursor.execute("SELECT role FROM staff WHERE user_id = ?", (user_id,))
    staff = cursor.fetchone()
    if not staff:
        bot.send_message(user_id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π —Å–ø—Ä–∞–≤–∫–∏.")
        return
    
    role = staff[0]  # –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (admin –∏–ª–∏ agent)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if role == "admin":
        response = (
            "üëë –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
            "/makeadmin <ID> - –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            "–ü—Ä–∏–º–µ—Ä: `/makeadmin 123456789`\n\n"
            "/removeadmin <ID> - –°–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
            "–ü—Ä–∏–º–µ—Ä: `/removeadmin 123456789`\n\n"
            "/ban <ID> <–ø—Ä–∏—á–∏–Ω–∞> - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
            "–ü—Ä–∏–º–µ—Ä: `/ban 123456789 –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª`\n\n"
            "/unban <ID> - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
            "–ü—Ä–∏–º–µ—Ä: `/unban 123456789`\n\n"
            "/ask <–Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞> - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ.\n"
            "–ü—Ä–∏–º–µ—Ä: `/ask 42`\n\n"
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é.\n"
            "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ - –£–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é.\n"
            "üìã –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.\n"
            "üë• –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∞–≥–µ–Ω—Ç–æ–≤.\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã.\n"
            "‚öñÔ∏è –û–±–∂–∞–ª–æ–≤–∞–Ω–∏—è - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–π."
        )
    elif role == "agent":
        response = (
            "üéâ –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤:\n\n"
            "/ask <–Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞> - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ.\n"
            "–ü—Ä–∏–º–µ—Ä: `/ask 42`\n\n"
            "üìã –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.\n"
            "üë• –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∞–≥–µ–Ω—Ç–æ–≤.\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã.\n"
            "‚öñÔ∏è –û–±–∂–∞–ª–æ–≤–∞–Ω–∏—è - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–π."
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    bot.send_message(user_id, response, parse_mode="Markdown")

#######
# –ö–æ–º–∞–Ω–¥–∞ /ask
#######
@bot.message_handler(commands=["ask"])
def get_ticket_info(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ask
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
    –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    –§–æ—Ä–º–∞—Ç: /ask <–Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞>
    """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (–¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    cursor.execute("SELECT role FROM staff WHERE user_id = ?", (user_id,))
    staff = cursor.fetchone()
    if not staff:
        bot.send_message(user_id, 
                         "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        bot.send_message(user_id, 
                         "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ask <–Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞>")
        return
    
    try:
        ticket_id = int(args[1])  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("""
            SELECT t.ticket_id, t.user_id, t.message, t.status, u.username 
            FROM tickets t
            LEFT JOIN users u ON t.user_id = u.user_id
            WHERE t.ticket_id = ?
        """, (ticket_id,))
        ticket_data = cursor.fetchone()
        
        if not ticket_data:
            bot.send_message(user_id, 
                             f"‚ùå –¢–∏–∫–µ—Ç —Å –Ω–æ–º–µ—Ä–æ–º {ticket_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        ticket_id, creator_user_id, message, status, username = ticket_data
        username = f"@{username}" if username else "Unknown"
        
        # –ï—Å–ª–∏ —Ç–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if status == "closed":
            response = (
                f"üîí –ó–∞–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç #{ticket_id}:\n"
                f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {username} (ID: {creator_user_id})\n"
                f"üìã –°–æ–æ–±—â–µ–Ω–∏–µ: {message}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: –ó–∞–∫—Ä—ã—Ç"
            )
            bot.send_message(user_id, response)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = (
            f"üö® –¢–∏–∫–µ—Ç #{ticket_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {creator_user_id}):\n"
            f"{message}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = InlineKeyboardMarkup()
        
        # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if staff[0] == "admin":
            keyboard.row(
                InlineKeyboardButton("üõë –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_{ticket_id}_{creator_user_id}")
            )
        
        # –í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–ª –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç
        keyboard.row(
            InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{ticket_id}_{creator_user_id}"),
            InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close_{ticket_id}_{creator_user_id}")
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        bot.send_message(user_id, response, reply_markup=keyboard)
        
    except ValueError:
        bot.send_message(user_id, 
                         "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–∏–∫–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
    except sqlite3.Error as e:
        bot.send_message(user_id, 
                         "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Database error in /ask: {e}")



@bot.message_handler(commands=["start"])
def start(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ —Ä–æ–ª—å
    """
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    cursor.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (user_id, username))
    conn.commit()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    create_first_admin(message)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT is_blocked FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    if user and user[0]:  # –ï—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        bot.send_message(
            user_id,
            "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=user_blocked_menu
        )
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT role FROM staff WHERE user_id = ?", (user_id,))
        staff = cursor.fetchone()
        if staff:
            role = staff[0]
            if role == "admin":
                bot.send_message(
                    user_id,
                    "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üåü\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π:",
                    reply_markup=admin_menu
                )
            elif role == "agent":
                bot.send_message(
                    user_id,
                    "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–≥–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏! üåü\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–∫–µ—Ç–∞–º–∏:",
                    reply_markup=agent_menu
                )
        else:
            # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            bot.send_message(
                user_id,
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏! üåü\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∏–∫–µ—Ç—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–º–æ—â—å.",
                reply_markup=user_main_menu
            )

@bot.message_handler(commands=["ban"])
def ban_user_command(message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    –§–æ—Ä–º–∞—Ç: /ban <ID> <–ø—Ä–∏—á–∏–Ω–∞>
    """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    cursor.execute("SELECT role FROM staff WHERE user_id = ?", (user_id,))
    staff = cursor.fetchone()
    if not staff or staff[0] != "admin": #–¢—É—Ç –º–æ–∂–µ—Ç–µ —É–±—Ä–∞—Ç—å  or staff[0] != "admin" –∏ –æ–Ω–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∏ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
        bot.send_message(message.chat.id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        bot.send_message(message.chat.id, 
                         "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ban <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <–ø—Ä–∏—á–∏–Ω–∞>")
        return
    
    try:
        target_user_id = int(args[1])
        reason = args[2]
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞
        cursor.execute("UPDATE users SET is_blocked = 1, block_reason = ? WHERE user_id = ?", 
                      (reason, target_user_id))
        conn.commit()
        
        bot.send_message(message.chat.id, 
                         f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            bot.send_message(
                target_user_id,
                f"‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
                reply_markup=user_blocked_menu
            )
        except telebot.apihelper.ApiTelegramException as e:
            bot.send_message(
                message.chat.id,
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {target_user_id}: {e}"
            )
            
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
    except sqlite3.Error as e:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Database error: {e}")

@bot.message_handler(commands=["unban"])
def unban_user_command(message):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    cursor.execute("SELECT role FROM staff WHERE user_id = ?", (user_id,))
    staff = cursor.fetchone()
    if not staff or staff[0] != "admin":
        bot.send_message(message.chat.id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    # –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /unban <ID>")
        return
    try:
        target_user_id = int(args[1])
        # –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–±—Ä–æ—Å cooldown
        cursor.execute("""
            UPDATE users 
            SET is_blocked = 0, block_reason = NULL, last_appeal_date = NULL 
            WHERE user_id = ?
        """, (target_user_id,))
        conn.commit()
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        try:
            bot.send_message(
                target_user_id,
                "‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç—å –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è.",
                reply_markup=user_main_menu
            )
        except telebot.apihelper.ApiTelegramException as e:
            bot.send_message(
                message.chat.id,
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {target_user_id}: {e}"
            )
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
    except sqlite3.Error as e:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Database error: {e}")


#######
# –ö–Ω–æ–ø–∫–∏ –∏ –∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
#######
@bot.message_handler(func=lambda message: message.text == "üìù –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç")
def create_ticket(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç"
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    """
    user_id = message.from_user.id
    cursor.execute("SELECT is_blocked FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    if user and user[0]:
        bot.send_message(user_id, 
                         "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∏–∫–µ—Ç—ã, —Ç–∞–∫ –∫–∞–∫ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        bot.send_message(user_id, 
                         "üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å:")
        bot.register_next_step_handler(message, process_ticket_creation)

def process_ticket_creation(message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–∏–∫–µ—Ç –≤ –±–∞–∑—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª
    """
    user_id = message.from_user.id
    ticket_message = message.text
    
    try:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –≤ –±–∞–∑—É
        cursor.execute("INSERT INTO tickets (user_id, message) VALUES (?, ?)", 
                      (user_id, ticket_message))
        ticket_id = cursor.lastrowid
        conn.commit()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = InlineKeyboardMarkup()
        keyboard.row(
            InlineKeyboardButton("üõë –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_{ticket_id}_{user_id}"),
            InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{ticket_id}_{user_id}")
        )
        keyboard.row(
            InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close_{ticket_id}_{user_id}")
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
        cursor.execute("SELECT user_id, role FROM staff")
        staff_members = cursor.fetchall()
        notification_message = (
            f"üö® –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #{ticket_id} –æ—Ç @{message.from_user.username or 'Unknown'}:\n"
            f"{ticket_message}"
        )
        for member in staff_members:
            staff_id, role = member
            try:
                bot.send_message(staff_id, notification_message, reply_markup=keyboard)
            except telebot.apihelper.ApiTelegramException as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {staff_id}: {e}")
        
        bot.send_message(user_id, 
                         f"‚úÖ –í–∞—à —Ç–∏–∫–µ—Ç #{ticket_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
                         "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏.", 
                         reply_markup=telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
                         .row("‚ùå –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç").row("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–∫–µ—Ç").row("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        
    except sqlite3.Error as e:
        bot.send_message(user_id, 
                         "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Database error: {e}")

@bot.message_handler(func=lambda message: message.text == "üìú –ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–µ—Ç–æ–≤")
def ticket_history(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–µ—Ç–æ–≤"
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    cursor.execute("SELECT * FROM tickets WHERE user_id = ?", (user_id,))
    tickets = cursor.fetchall()
    
    if not tickets:
        bot.send_message(user_id, 
                         "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤.", 
                         reply_markup=user_main_menu)
        return
    
    response = "üìú –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Ç–∏–∫–µ—Ç–æ–≤:\n"
    for ticket in tickets:
        ticket_id = ticket[0]
        message_text = ticket[2]
        status = ticket[3]
        created_at = ticket[5]
        closed_at = ticket[6]
        close_reason = ticket[7]
        
        response += (
            f"\n#{ticket_id} | –°—Ç–∞—Ç—É—Å: {status} | –°–æ–∑–¥–∞–Ω: {created_at}\n"
            f"üìã –°–æ–æ–±—â–µ–Ω–∏–µ: {message_text[:50]}{'...' if len(message_text) > 50 else ''}\n"
        )
        if closed_at:
            response += f"üîí –ó–∞–∫—Ä—ã—Ç: {closed_at} | –ü—Ä–∏—á–∏–Ω–∞: {close_reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        response += "‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ\n"
    
    bot.send_message(user_id, response, reply_markup=user_main_menu)

@bot.message_handler(func=lambda message: message.text == "‚öñÔ∏è –ü–æ–¥–∞—Ç—å –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ")
def appeal_block(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–∞—Ç—å –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ"
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∞—á–∏ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É
    """
    user_id = message.from_user.id
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è
        cursor.execute("SELECT is_blocked, block_reason, last_appeal_date FROM users WHERE user_id = ?", (user_id,))
        user_data = cursor.fetchone()
        if not user_data or not user_data[0]:
            bot.send_message(user_id, 
                             "‚ùå –í—ã –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.", 
                             reply_markup=user_main_menu)
            return
        
        is_blocked, block_reason, last_appeal = user_data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ
        if last_appeal:
            last_appeal_date = datetime.strptime(last_appeal, "%Y-%m-%d")
            if datetime.now() - last_appeal_date < timedelta(days=3):
                bot.send_message(
                    user_id,
                    "‚è≥ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 3 –¥–Ω—è.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=user_blocked_menu
                )
                return
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–∏–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT ticket_id, message FROM tickets WHERE user_id = ? ORDER BY created_at DESC LIMIT 1", (user_id,))
        ticket = cursor.fetchone()
        if not ticket:
            bot.send_message(
                user_id,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∏–∫–µ—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –≤–∞—à–µ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π.",
                reply_markup=user_blocked_menu
            )
            return
        
        ticket_id, ticket_message = ticket
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è
        bot.send_message(
            user_id,
            f"üìù –ü—Ä–∏—á–∏–Ω–∞ –≤–∞—à–µ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {block_reason}\n"
            f"üîó –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–∏–∫–µ—Ç #{ticket_id}: {ticket_message}\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è:",
            reply_markup=user_blocked_menu
        )
        bot.register_next_step_handler(message, lambda m: process_appeal(m, ticket_id))
        
    except sqlite3.Error as e:
        bot.send_message(user_id, 
                         "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                         reply_markup=user_blocked_menu)
        print(f"Database error: {e}")

def process_appeal(message, ticket_id):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∞—á–∏ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è
    """
    user_id = message.from_user.id
    reason = message.text
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ
        cursor.execute("INSERT INTO appeals (user_id, reason, related_ticket_id) VALUES (?, ?, ?)", 
                      (user_id, reason, ticket_id))
        cursor.execute("UPDATE users SET last_appeal_date = ? WHERE user_id = ?", 
                      (datetime.now().strftime("%Y-%m-%d"), user_id))
        conn.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª
        cursor.execute("SELECT user_id FROM staff")
        staff_members = cursor.fetchall()
        for member in staff_members:
            bot.send_message(member[0], 
                            f"‚öñÔ∏è –ù–æ–≤–æ–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –æ—Ç @{message.from_user.username}:\n"
                            f"üîó –¢–∏–∫–µ—Ç #{ticket_id}: {reason}")
        
        bot.send_message(user_id, 
                         "‚úÖ –í–∞—à–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! üì¨\n"
                         "–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.", 
                         reply_markup=user_blocked_menu)
        
    except sqlite3.Error as e:
        bot.send_message(user_id, 
                         "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                         reply_markup=user_blocked_menu)
        print(f"Database error: {e}")

@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞")
def add_agent(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞"
    –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    cursor.execute("SELECT role FROM staff WHERE user_id = ?", (message.from_user.id,))
    staff = cursor.fetchone()
    if not staff or staff[0] != "admin":
        bot.send_message(message.chat.id, 
                         "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    bot.send_message(message.chat.id, 
                     "üÜî –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–≥–µ–Ω—Ç–æ–º:")
    bot.register_next_step_handler(message, process_add_agent)

def process_add_agent(message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
    """
    agent_id = message.text.strip()
    try:
        agent_id = int(agent_id)
        cursor.execute("INSERT INTO staff (user_id, role) VALUES (?, ?)", 
                      (agent_id, "agent"))
        conn.commit()
        
        bot.send_message(message.chat.id, 
                         f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {agent_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–≥–µ–Ω—Ç–æ–º!")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        try:
            bot.send_message(
                agent_id,
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–≥–µ–Ω—Ç–æ–º —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏! üåü\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–∫–µ—Ç–∞–º–∏:",
                reply_markup=agent_menu
            )
        except telebot.apihelper.ApiTelegramException as e:
            bot.send_message(
                message.chat.id,
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {agent_id}: {e}"
            )
            
    except ValueError:
        bot.send_message(message.chat.id, 
                         "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except sqlite3.Error as e:
        bot.send_message(message.chat.id, 
                         "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Database error: {e}")

@bot.message_handler(func=lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤")
def show_ticket_list(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤"
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ —Å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    cursor.execute("SELECT role FROM staff WHERE user_id = ?", (user_id,))
    staff = cursor.fetchone()
    if not staff:
        bot.send_message(user_id, 
                         "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É —Ç–∏–∫–µ—Ç–æ–≤.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã
        cursor.execute("""
            SELECT t.ticket_id, t.user_id, t.message, t.status, t.created_at, u.username 
            FROM tickets t
            LEFT JOIN users u ON t.user_id = u.user_id
            WHERE t.status = 'open'
            ORDER BY t.created_at ASC
        """)
        tickets = cursor.fetchall()
        
        if not tickets:
            bot.send_message(user_id, 
                             "üì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.", 
                             reply_markup=admin_menu if staff[0] == "admin" else agent_menu)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ç—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        global current_tickets
        current_tickets = tickets
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        show_ticket_page(user_id, 1, staff[0])
        
    except sqlite3.Error as e:
        bot.send_message(user_id, 
                         "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Database error: {e}")

def show_ticket_page(user_id, page, role):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤
    """
    tickets_per_page = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    total_pages = (len(current_tickets) + tickets_per_page - 1) // tickets_per_page
    if page < 1 or page > total_pages:
        bot.send_message(user_id, 
                         "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
        return
    
    start_index = (page - 1) * tickets_per_page
    end_index = start_index + tickets_per_page
    tickets_on_page = current_tickets[start_index:end_index]
    
    response = f"üìã –°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n"
    for ticket in tickets_on_page:
        ticket_id, user_id_ticket, message, status, created_at, username = ticket
        username = f"@{username}" if username else "–ù–µ—Ç —Ç–µ–≥–∞"
        response += (
            f"\nüìå #{ticket_id} | üïí {created_at}\n"
            f"üë§ {username} ({user_id_ticket})\n"
            f"üìã {message[:50]}{'...' if len(message) > 50 else ''}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            f"‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ\n"
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = telebot.types.InlineKeyboardMarkup()
    if page > 1:
        keyboard.add(telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"tickets_page_{page - 1}"))
    if page < total_pages:
        keyboard.add(telebot.types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"tickets_page_{page + 1}"))
    
    bot.send_message(user_id, response, reply_markup=keyboard)

#######
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
#######
@bot.callback_query_handler(func=lambda call: call.data.startswith("tickets_page_"))
def handle_ticket_pagination(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Ç–∏–∫–µ—Ç–æ–≤
    """
    page = int(call.data.split("_")[-1])
    user_id = call.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    cursor.execute("SELECT role FROM staff WHERE user_id = ?", (user_id,))
    staff = cursor.fetchone()
    if not staff:
        bot.answer_callback_query(call.id, 
                                  "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    show_ticket_page(user_id, page, staff[0])

@bot.callback_query_handler(func=lambda call: call.data.startswith(('block_', 'reply_', 'close_')))
def handle_ticket_callback(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–∏–∫–µ—Ç–∞–º–∏ (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞, –æ—Ç–≤–µ—Ç, –∑–∞–∫—Ä—ã—Ç–∏–µ)
    """
    try:
        data = call.data.split('_')
        action = data[0]
        ticket_id = int(data[1])
        user_id = int(data[2])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        cursor.execute("SELECT role FROM staff WHERE user_id = ?", (call.from_user.id,))
        staff = cursor.fetchone()
        if not staff:
            bot.answer_callback_query(call.id, 
                                      "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º.")
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–∫–µ—Ç–µ
        cursor.execute("""
            SELECT message, status 
            FROM tickets 
            WHERE ticket_id = ?
        """, (ticket_id,))
        ticket_data = cursor.fetchone()
        if not ticket_data:
            bot.answer_callback_query(call.id, 
                                      "‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        ticket_message, ticket_status = ticket_data
        if ticket_status != 'open':
            bot.answer_callback_query(call.id, 
                                      "‚ùå –¢–∏–∫–µ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç.")
            return
        
        if action == "block":
            if staff[0] != "admin":
                bot.answer_callback_query(call.id, 
                                          "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                return
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            bot.send_message(call.message.chat.id, 
                             "üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
            bot.register_next_step_handler(call.message, 
                                           lambda m: process_block_from_ticket(m, user_id, ticket_id, call))
            
        elif action == "reply":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç
            bot.send_message(call.message.chat.id, 
                             "üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç:")
            bot.register_next_step_handler(call.message, 
                                           lambda m: process_reply_to_ticket(m, user_id, ticket_id, call))
            
        elif action == "close":
            if staff[0] != "admin":
                bot.answer_callback_query(call.id, 
                                          "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Ç–∏–∫–µ—Ç—ã.")
                return
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è
            bot.send_message(call.message.chat.id, 
                             "üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞:")
            bot.register_next_step_handler(call.message, 
                                           lambda m: process_close_ticket_admin(m, user_id, ticket_id, call))
            
    except ValueError:
        bot.answer_callback_query(call.id, 
                                  "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        bot.answer_callback_query(call.id, 
                                  "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        print(f"Error in ticket callback handler: {e}")

def process_block_from_ticket(message, user_id, ticket_id, call):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∏–∫–µ—Ç–∞
    """
    try:
        reason = message.text
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""
            UPDATE users 
            SET is_blocked = 1, block_reason = ?, last_appeal_date = NULL 
            WHERE user_id = ?
        """, (reason, user_id))
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ç
        cursor.execute("""
            UPDATE tickets 
            SET status = 'closed', closed_at = CURRENT_TIMESTAMP, close_reason = ? 
            WHERE ticket_id = ?
        """, (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {reason}", ticket_id))
        conn.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            bot.send_message(
                user_id,
                f"‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
                reply_markup=user_blocked_menu
            )
        except telebot.apihelper.ApiTelegramException as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"{call.message.text}\n"
                 f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n"
                 f"–ü—Ä–∏—á–∏–Ω–∞: {reason}",
            reply_markup=None
        )
        bot.answer_callback_query(call.id, 
                                  "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        
    except sqlite3.Error as e:
        conn.rollback()
        bot.answer_callback_query(call.id, 
                                  "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        print(f"Database error during block: {e}")

def process_reply_to_ticket(message, user_id, ticket_id, call):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç
    """
    try:
        reply_text = message.text
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            bot.send_message(
                user_id,
                f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à —Ç–∏–∫–µ—Ç #{ticket_id}:\n"
                f"{reply_text}",
                reply_markup=user_main_menu
            )
        except telebot.apihelper.ApiTelegramException as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ç
        cursor.execute("""
            UPDATE tickets 
            SET status = 'closed', closed_at = CURRENT_TIMESTAMP, close_reason = ? 
            WHERE ticket_id = ?
        """, ("–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞", ticket_id))
        conn.commit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"{call.message.text}\n"
                 f"‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:\n"
                 f"{reply_text}",
            reply_markup=None
        )
        bot.answer_callback_query(call.id, 
                                  "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Ç–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç.")
        
    except sqlite3.Error as e:
        conn.rollback()
        bot.answer_callback_query(call.id, 
                                  "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.")
        print(f"Database error during reply: {e}")

def process_close_ticket_admin(message, user_id, ticket_id, call):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    """
    try:
        reason = message.text
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ç
        cursor.execute("""
            UPDATE tickets 
            SET status = 'closed', closed_at = CURRENT_TIMESTAMP, close_reason = ? 
            WHERE ticket_id = ?
        """, (reason, ticket_id))
        conn.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            bot.send_message(
                user_id,
                f"‚ùå –í–∞—à —Ç–∏–∫–µ—Ç #{ticket_id} –∑–∞–∫—Ä—ã—Ç.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
                reply_markup=user_main_menu
            )
        except telebot.apihelper.ApiTelegramException as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"{call.message.text}\n"
                 f"‚úÖ –¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç.\n"
                 f"–ü—Ä–∏—á–∏–Ω–∞: {reason}",
            reply_markup=None
        )
        bot.answer_callback_query(call.id, 
                                  "‚úÖ –¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç.")
        
    except sqlite3.Error as e:
        conn.rollback()
        bot.answer_callback_query(call.id, 
                                  "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞.")
        print(f"Database error during close: {e}")

#######
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
#######
def create_first_admin(message):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
    –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ staff –ø—É—Å—Ç–∞—è, –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
    """
    try:
        cursor.execute("SELECT COUNT(*) FROM staff")
        staff_count = cursor.fetchone()[0]
        if staff_count == 0:
            first_admin_id = message.from_user.id
            cursor.execute("INSERT INTO staff (user_id, role) VALUES (?, ?)", 
                          (first_admin_id, "admin"))
            conn.commit()
            bot.send_message(
                first_admin_id,
                "üëë –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø–µ—Ä–≤—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º! üéâ\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π:",
                reply_markup=admin_menu
            )
            print(f"–ü–µ—Ä–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω: {first_admin_id}")
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")


#######
# –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
#######
@bot.message_handler(commands=["makeadmin"])
def make_admin_command(message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    –§–æ—Ä–º–∞—Ç: /makeadmin <ID>
    """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT role FROM staff WHERE user_id = ?", (user_id,))
    current_user = cursor.fetchone()
    if not current_user or current_user[0] != "admin":
        bot.send_message(message.chat.id, 
                         "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        bot.send_message(message.chat.id, 
                         "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /makeadmin <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")
        return
    
    try:
        target_user_id = int(args[1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (target_user_id,))
        target_user = cursor.fetchone()
        if not target_user:
            bot.send_message(message.chat.id, 
                             f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        cursor.execute("SELECT role FROM staff WHERE user_id = ?", (target_user_id,))
        existing_staff = cursor.fetchone()
        if existing_staff and existing_staff[0] == "admin":
            bot.send_message(message.chat.id, 
                             f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""
            INSERT INTO staff (user_id, role) VALUES (?, ?)
            ON CONFLICT(user_id) DO UPDATE SET role = excluded.role
        """, (target_user_id, "admin"))
        conn.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.send_message(message.chat.id, 
                         f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            bot.send_message(
                target_user_id,
                "üëë –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏! üéâ\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π:",
                reply_markup=admin_menu
            )
        except telebot.apihelper.ApiTelegramException as e:
            bot.send_message(
                message.chat.id,
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}"
            )
            
    except ValueError:
        bot.send_message(message.chat.id, 
                         "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
    except sqlite3.Error as e:
        bot.send_message(message.chat.id, 
                         "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Database error: {e}")

@bot.message_handler(commands=["removeadmin"])
def remove_admin_command(message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    –§–æ—Ä–º–∞—Ç: /removeadmin <ID>
    """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT role FROM staff WHERE user_id = ?", (user_id,))
    current_user = cursor.fetchone()
    if not current_user or current_user[0] != "admin":
        bot.send_message(message.chat.id, 
                         "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        bot.send_message(message.chat.id, 
                         "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /removeadmin <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")
        return
    
    try:
        target_user_id = int(args[1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        cursor.execute("SELECT role FROM staff WHERE user_id = ?", (target_user_id,))
        target_user = cursor.fetchone()
        if not target_user or target_user[0] != "admin":
            bot.send_message(message.chat.id, 
                             f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            return
        
        # –£–¥–∞–ª—è–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        cursor.execute("DELETE FROM staff WHERE user_id = ?", (target_user_id,))
        conn.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.send_message(message.chat.id, 
                         f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –±—ã–≤—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            bot.send_message(
                target_user_id,
                "‚ö†Ô∏è –í—ã –±—ã–ª–∏ —Å–Ω—è—Ç—ã —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.",
                reply_markup=user_main_menu
            )
        except telebot.apihelper.ApiTelegramException as e:
            bot.send_message(
                message.chat.id,
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –±—ã–≤—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}"
            )
            
    except ValueError:
        bot.send_message(message.chat.id, 
                         "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
    except sqlite3.Error as e:
        bot.send_message(message.chat.id, 
                         "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Database error: {e}")

#######
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
#######
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(non_stop=True, timeout=120)